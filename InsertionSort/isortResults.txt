Brian Orozco March 24, 2017
Professor Nassimi CS 241 – 002
Program 1: Insertion Sort
Theoretically, the worst-case number of key comparisons is (n^2 − n)/2, and the average number
is (n^2 − n)/4, which is half of the worst-case.
So for n = 32:
 Worst-Case = 496
 Average Case = 248
Source Code Output examples:
n = 32
[11, 6, 83, 77, 74, 82, 94, 42, 38, 44, 57, 81, 76, 35, 84, 71, 45, 12, 51, 65, 65,
43, 84, 98, 93, 37, 51, 58, 24, 9, 54, 53]
[6, 9, 11, 12, 24, 35, 37, 38, 42, 43, 44, 45, 51, 51, 53, 54, 57, 58, 65, 65, 71,
74, 76, 77, 81, 82, 83, 84, 84, 93, 94, 98]
COMPCOUNT = 261
n = 32
[78, 68, 73, 51, 59, 19, 94, 33, 89, 34, 5, 35, 32, 43, 75, 34, 40, 5, 89, 48, 47,
80, 98, 36, 34, 46, 81, 4, 79, 13, 75, 90]
[4, 5, 5, 13, 19, 32, 33, 34, 34, 34, 35, 36, 40, 43, 46, 47, 48, 51, 59, 68, 73, 75,
75, 78, 79, 80, 81, 89, 89, 90, 94, 98]
COMPCOUNT = 240
n = 32
[37, 25, 28, 84, 92, 98, 59, 62, 30, 72, 72, 58, 29, 7, 90, 19, 35, 19, 67, 12, 20,
49, 74, 87, 68, 41, 23, 52, 59, 95, 9, 0]
[0, 7, 9, 12, 19, 19, 20, 23, 25, 28, 29, 30, 35, 37, 41, 49, 52, 58, 59, 59, 62, 67,
68, 72, 72, 74, 84, 87, 90, 92, 95, 98]
COMPCOUNT = 276
n = 32
[23, 16, 60, 66, 34, 22, 43, 19, 5, 93, 33, 4, 65, 39, 22, 8, 88, 76, 62, 61, 57, 44,
43, 36, 49, 67, 17, 27, 43, 1, 77, 50]
[1, 4, 5, 8, 16, 17, 19, 22, 22, 23, 27, 33, 34, 36, 39, 43, 43, 43, 44, 49, 50, 57,
60, 61, 62, 65, 66, 67, 76, 77, 88, 93]
COMPCOUNT = 228
Running my Source Code 20 times:
1. COMPCOUNT = 255
2. COMPCOUNT = 262
3. COMPCOUNT = 259
4. COMPCOUNT = 233
5. COMPCOUNT = 251
6. COMPCOUNT = 206
7. COMPCOUNT = 226
8. COMPCOUNT = 294
9. COMPCOUNT = 231
10. COMPCOUNT = 189
11. COMPCOUNT = 273
12. COMPCOUNT = 223
13. COMPCOUNT = 275
14. COMPCOUNT = 227
15. COMPCOUNT = 254
16. COMPCOUNT = 222
17. COMPCOUNT = 349
18. COMPCOUNT = 327
19. COMPCOUNT = 291
20. COMPCOUNT = 246
My results:
 My Worst Case = 349
 My Best Case = 189
 My Average Case = about 255
In terms of average case, the theoretical amount was fairly accurate, being only 7 units away
from my average case, however, my worst-case in the test runs never came close to the worst
possible theoretical value.
Source code Big N output examples:
n = 100
COMPCOUNT = 2373
n = 1000
COMPCOUNT = 248768
n = 10000
COMPCOUNT = 24665225
n = 100
COMPCOUNT = 2339
n = 1000
COMPCOUNT = 248961
n = 10000
COMPCOUNT = 24982221
n = 100
COMPCOUNT = 2392
n = 1000
COMPCOUNT = 246932
n = 10000
COMPCOUNT = 24630008
n = 100
COMPCOUNT = 2404
n = 1000
COMPCOUNT = 245553
n = 10000
COMPCOUNT = 25037510
n = 100
COMPCOUNT = 2395
n = 1000
COMPCOUNT = 243747
n = 10000
COMPCOUNT = 24857181
In conclusion, judging from the outputs of my code for big n arrays, the number of keycomparisons
does, in fact, show O(n^2) performance. Every time the size of the array is
increased by a factor of 10, the number of operations increases by (approximately) a factor of
100.
